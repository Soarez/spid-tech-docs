{:method :GET, :path "/endpoints", :response {:status 200, :error nil, :data [{:path "endpoints", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Utility:endpoints", :httpMethods {:GET {:name "GET", :required [], :optional ["name" "url"]}}, :url "/api/2/endpoints", :pathParameters [], :controller "Api/2/Utility.endpoints", :default_output_format "json", :description "List all api endpoints, or get info on single endpoint (specify name or url)"} {:path "describe/{object}", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Utility:describe", :httpMethods {:GET {:name "GET", :required [], :optional ["property" "locale"]}}, :url "/api/2/describe/{object}", :pathParameters ["object"], :controller "Api/2/Utility.describe", :default_output_format "json", :description "Describe an objects's properties, optionally translated (to locale)."} {:path "status", :valid_output_formats ["json" "jsonp"], :method "*", :name "Platform:status", :httpMethods {:GET {:name "GET", :required [], :optional []}, :POST {:name "POST", :required [], :optional []}}, :url "/api/2/status", :pathParameters [], :controller "Api/2/Platform.status", :default_output_format "json", :description "Get status information from the platform"} {:path "version", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Platform:version", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/version", :pathParameters [], :controller "Api/2/Platform.version", :default_output_format "json", :description "Find out what version you are using"} {:path "terms", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Platform:terms", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/terms", :pathParameters [], :controller "Api/2/Platform.terms", :default_output_format "json", :description "Returns the current user terms for the client and SPiD"} {:path "qrcode", :valid_output_formats ["json" "png"], :method "GET", :name "Utility:qrcode", :httpMethods {:GET {:name "GET", :required [], :optional ["type" "content" "w" "h"]}}, :url "/api/2/qrcode", :pathParameters [], :controller "Api/2/Utility.qrcode", :default_output_format "json", :description ""} {:path "/oauth/exchange", :valid_output_formats ["json"], :method "POST", :name "Authorization:exchange", :httpMethods {:POST {:name "POST", :required ["clientId" "type"], :optional ["redirectUri"]}}, :url "/api/2/oauth/exchange", :pathParameters [], :controller "Api/2/Authorization.exchange", :default_output_format "json", :description "Exchanges an authorization code"} {:path "url/{action}", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Utility:url", :httpMethods {:GET {:name "GET", :required ["url"], :optional []}}, :url "/api/2/url/{id}", :pathParameters ["action"], :controller "Api/2/Utility.url", :default_output_format "json", :description "Create, and expand, short version of URIs"} {:path "admin/{section}", :valid_output_formats ["json" "jsonp" "png"], :method "GET", :name "Utility:adminBySection", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/admin/{section}", :pathParameters ["section"], :controller "Api/2/Utility.admin", :default_output_format "json", :description "Get list of roles {section}=roles, or acl, {section}=acl"} {:path "admin/acl/{role}", :valid_output_formats ["json" "jsonp" "png"], :method "GET", :name "Utility:aclForRole", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/admin/{section}/{id}", :pathParameters ["role"], :controller "Api/2/Utility.admin", :default_output_format "json", :description "Specify a role (ie `watcher`, `admin`) and get acl list"} {:path "email_templates", :valid_output_formats ["json" "jsonp" "xml"], :method "*", :name "Utility:emailTemplates", :httpMethods {:GET {:name "GET", :required [], :optional ["locale"]}, :POST {:name "POST", :required ["templates"], :optional ["locale"]}}, :url "/api/2/email_templates", :pathParameters [], :controller "Api/2/Utility.email_templates", :default_output_format "json", :description "Get and Set email templates"} {:path "{type}/{id}/do/{key}", :valid_output_formats ["json" "jsonp"], :method "*", :name "Data:doByTypeAndIdAndKey", :httpMethods {:GET {:name "GET", :required [], :optional []}, :POST {:name "POST", :required [], :optional []}}, :url "/api/2/{type}/{id}/do/{key}", :pathParameters ["type" "id" "key"], :controller "Api/2/Data.soda", :default_output_format "json", :description "Data storage endpoint. NB POST does not work with explorer."} {:path "{type}/{id}/{subtype}/{subid}/do/{key}", :valid_output_formats ["json" "jsonp"], :method "*", :name "Data:doByTypeAndSubTypeAndIdAndKey", :httpMethods {:GET {:name "GET", :required [], :optional []}, :POST {:name "POST", :required [], :optional []}}, :url "/api/2/{type}/{id}/{subtype}/{subid}/do/{key}", :pathParameters ["type" "id" "subtype" "subid" "key"], :controller "Api/2/Data.soda", :default_output_format "json", :description "Data storage sub endpoint. NB POST does not work with explorer"} {:path "user/{id}/dataobject/{key}", :valid_output_formats ["json"], :method "*", :name "DataObject:getAndUpdateAndDeleteByUser", :httpMethods {:GET {:name "GET", :required [], :optional []}, :POST {:name "POST", :required ["value"], :optional []}, :DELETE {:name "DELETE", :required [], :optional []}}, :url "/api/2/user/{id}/dataobject/{key}", :pathParameters ["id" "key"], :controller "Api/2/DataObject.user_dataobject", :default_output_format "json", :description "Data storage endpoint for user."} {:path "user/{id}/dataobjects", :valid_output_formats ["json"], :method "*", :name "DataObject:listByUser", :httpMethods {:GET {:name "GET", :required [], :optional ["key" "limit" "since" "offset" "until" "sort" "filters"]}}, :url "/api/2/user/{id}/dataobjects", :pathParameters ["id"], :controller "Api/2/DataObject.user_dataobjects", :default_output_format "json", :description "Data storage list endpoint for user."} {:path "dataobjects", :valid_output_formats ["json"], :method "*", :name "DataObject:list", :httpMethods {:GET {:name "GET", :required [], :optional ["key" "limit" "since" "offset" "until" "sort" "filters"]}}, :url "/api/2/dataobjects", :pathParameters [], :controller "Api/2/DataObject.dataobjects", :default_output_format "json", :description "Data storage list endpoint."} {:path "email/{email}/status", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Email:status", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/email/{email}/status", :pathParameters ["email"], :controller "Api/2/Email.email_status", :default_output_format "json", :description "Check if email exists in SPiD, is verified or available"} {:path "me", :valid_output_formats ["json" "jsonp"], :method "GET", :name "User:me", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/me", :pathParameters [], :controller "Api/2/User.me", :default_output_format "json", :description "Get the user object for the authorized requesting user. "} {:path "me/vouchers", :valid_output_formats ["json" "jsonp"], :method "GET", :name "User:myVouchers", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/me/vouchers", :pathParameters [], :controller "Api/2/User.my_vouchers", :default_output_format "json", :description "Get the vouchers for the requesting user "} {:path "user", :valid_output_formats ["json" "jsonp" "png"], :method "POST", :name "User:create", :httpMethods {:POST {:name "POST", :required ["email"], :optional ["displayName" "name" "birthday" "addresses" "gender" "photo" "preferredUsername" "url" "utcOffset" "redirectUri"]}}, :url "/api/2/user", :pathParameters [], :controller "Api/2/User.user", :default_output_format "json", :description "Create a new user"} {:path "signup", :valid_output_formats ["json"], :method "POST", :name "User:signup", :httpMethods {:POST {:name "POST", :required ["email"], :optional ["password" "redirectUri"]}}, :url "/api/2/signup", :pathParameters [], :controller "Api/2/User.user_signup", :default_output_format "json", :description "Create a new user (no update)"} {:path "signup_jwt", :valid_output_formats ["json"], :method "POST", :name "User:signupJWT", :httpMethods {:POST {:name "POST", :required ["jwt"], :optional []}}, :url "/api/2/signup_jwt", :pathParameters [], :controller "Api/2/User.user_signup_jwt", :default_output_format "json", :description "Create a new user (no update) from a JWT"} {:path "attach_jwt", :valid_output_formats ["json"], :method "POST", :name "User:attachJWT", :httpMethods {:POST {:name "POST", :required ["jwt"], :optional []}}, :url "/api/2/user/attach_jwt", :pathParameters [], :controller "Api/2/User.user_attach_jwt", :default_output_format "json", :description "Attaches a thirdparty account from a JWT to a user"} {:path "user/{id/userId/email}/varnishId", :valid_output_formats ["json"], :method "GET", :name "User:getVarnishId", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/user/{id}/varnishId", :pathParameters ["id/userId/email"], :controller "Api/2/User.user_varnish", :default_output_format "json", :description "Get the varnish id for a user"} {:path "user/{id/userId/email}", :valid_output_formats ["json" "jsonp" "png"], :method "*", :name "User:getAndUpdate", :httpMethods {:GET {:name "GET", :required [], :optional []}, :POST {:name "POST", :required [], :optional ["displayName" "name" "birthday" "addresses" "gender" "photo" "preferredUsername" "url" "utcOffset"]}}, :url "/api/2/user/{id}", :pathParameters ["id/userId/email"], :controller "Api/2/User.user", :default_output_format "json", :description "Get a user data object or post changes to one."} {:path "user/{userId}/charge", :valid_output_formats ["json"], :method "POST", :name "User:charge", :httpMethods {:POST {:name "POST", :required ["hash" "requestReference" "items"], :optional ["clientReference" "paymentOptions" "purchaseFlow" "sellerUserId" "tag" "type"]}}, :url "/api/2/user/{id}/charge", :pathParameters ["userId"], :controller "Api/2/User.user_charge", :default_output_format "json", :description "Request a direct payment charge on a user."} {:path "user/{userId}/balance", :valid_output_formats ["json"], :method "GET", :name "User:balance", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/user/{id}/balance", :pathParameters ["userId"], :controller "Api/2/User.user_balance", :default_output_format "json", :description "Retrieve account balance for a user."} {:path "user/{userId/email}/payment/settings", :valid_output_formats ["json"], :method "GET", :name "User:paymentSettings", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/user/{id}/payment/settings", :pathParameters ["userId/email"], :controller "Api/2/User.user_payment_settings", :default_output_format "json", :description "Request payment settings for a user."} {:path "user/{userId}/preferences/payment", :valid_output_formats ["json"], :method "GET", :name "User:paymentePreference", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/user/{id}/preferences/payment", :pathParameters ["userId"], :controller "Api/2/User.user_preferences_payment", :default_output_format "json", :description "Request the payment preferences for direct payment charges on a user."} {:path "users", :valid_output_formats ["json" "jsonp" "png"], :method "GET", :name "User:list", :httpMethods {:GET {:name "GET", :required [], :optional ["limit" "since" "offset" "until" "fields" "sort" "filters" "id" "userId" "email" "emails" "emails_regex" "displayName" "givenName" "familyName" "fullName" "preferredUsername" "phoneNumber" "phoneNumbers" "gender" "birthday" "address_formatted" "address_postalCode" "address_country" "address_region" "address_locality" "address_streetAddress" "orderId" "paymentIdentifier"]}}, :url "/api/2/users", :pathParameters [], :controller "Api/2/User.users", :default_output_format "json", :description "List for users"} {:path "search/users", :valid_output_formats ["json"], :method "GET", :name "Search:users", :httpMethods {:GET {:name "GET", :required [], :optional ["filters" "clientId" "query" "id" "userId" "email" "displayName" "givenName" "familyName" "fullName" "preferredUsername" "gender" "birthyear" "emails" "phoneNumber" "phoneNumbers" "address" "homeAddress" "invoiceAddress" "deliveryAddress" "status"]}}, :url "/api/2/search/users", :pathParameters [], :controller "Api/2/Search.search_users", :default_output_format "json", :description "Search for user(s)"} {:path "search/users/{query}", :valid_output_formats ["json"], :method "GET", :name "Search:usersAll", :httpMethods {:GET {:name "GET", :required [], :optional ["filters" "clientId"]}}, :url "/api/2/search/users/{query}", :pathParameters [], :controller "Api/2/Search.search_users", :default_output_format "json", :description "Search for users by one shared query"} {:path "user/{id/userId/email}/logins", :valid_output_formats ["json" "jsonp"], :method "GET", :name "User:logins", :httpMethods {:GET {:name "GET", :required [], :optional ["limit" "since" "offset" "until" "ip" "status"]}}, :url "/api/2/user/{id}/logins", :pathParameters ["id/userId/email"], :controller "Api/2/User.user_logins", :default_output_format "json", :description "List all (or search for) logins for a user"} {:path "user/{id/userId/email}/trigger/{trigger}", :valid_output_formats ["json" "jsonp"], :method "GET", :name "User:trigger", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/user/{id}/trigger/{trigger}", :pathParameters ["id/userId/email" "trigger"], :controller "Api/2/User.user_trigger", :default_output_format "json", :description "Trigger a `newpassword` or `emailverification` for user"} {:path "user/{id/userId/email}/order/{orderId}", :valid_output_formats ["json" "jsonp"], :method "GET", :name "User:order", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/user/{id}/order/{<\\d+>order_id}", :pathParameters ["id/userId/email" "orderId"], :controller "Api/2/User.user_order", :default_output_format "json", :description "Get a single order for user."} {:path "user/{id/userId/email}/orders", :valid_output_formats ["json" "jsonp"], :method "GET", :name "User:orders", :httpMethods {:GET {:name "GET", :required [], :optional ["status" "filters"]}}, :url "/api/2/user/{id}/orders", :pathParameters ["id/userId/email"], :controller "Api/2/User.user_orders", :alias {:id "user_id"}, :default_output_format "json", :description "List orders for a user (on client)"} {:path "user/{id/userId/email}/order/{orderId}/credit", :valid_output_formats ["json" "jsonp"], :method "POST", :name "User:creditOrder", :httpMethods {:POST {:name "POST", :required [], :optional []}}, :url "/api/2/user/{id}/order/{<\\d+>order_id}/credit", :pathParameters ["id/userId/email" "orderId"], :controller "Api/2/User.user_order_credit", :default_output_format "json", :description "Deprecated! Use /order/{orderId}/credit"} {:path "user/{id/userId/email}/transactions", :valid_output_formats ["json" "jsonp"], :method "GET", :name "User:transactions", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/user/{id}/transactions", :pathParameters ["id/userId/email"], :controller "Api/2/User.user_transactions", :default_output_format "json", :description "List all money transactions related to a user"} {:path "user/{id/userId/email}/subscription", :valid_output_formats ["json" "jsonp"], :method "POST", :name "User:subscriptionCreate", :httpMethods {:POST {:name "POST", :required ["productId"], :optional ["startDate" "orderId" "expires"]}}, :url "/api/2/user/{id}/subscription", :pathParameters ["id/userId/email"], :controller "Api/2/User.user_subscription", :default_output_format "json", :description "Create a new user subscription for a user"} {:path "user/{id/userId/email}/subscription/{subscriptionId}", :valid_output_formats ["json" "jsonp"], :method "*", :name "User:getSubscriptionAndPostAndDelete", :httpMethods {:GET {:name "GET", :required [], :optional []}, :POST {:name "POST", :required ["autoRenew"], :optional []}, :DELETE {:name "DELETE", :required [], :optional []}}, :url "/api/2/user/{id}/subscription/{<\\d+>subscription_id}", :pathParameters ["id/userId/email" "subscriptionId"], :controller "Api/2/User.user_subscription", :default_output_format "json", :description "Get, Update or (soft)delete a User subscription."} {:path "user/{id/userId/email}/subscriptions", :valid_output_formats ["json" "jsonp"], :method "GET", :name "User:subscriptions", :httpMethods {:GET {:name "GET", :required [], :optional ["filters"]}}, :url "/api/2/user/{id}/subscriptions", :pathParameters ["id/userId/email"], :controller "Api/2/User.user_subscriptions", :default_output_format "json", :description "List all subscriptions (on client) for user"} {:path "user/{id/userId/email}/product/{productId}", :valid_output_formats ["json" "jsonp"], :method "*", :name "User:digitalContentGetUpdateDelete", :httpMethods {:GET {:name "GET", :required [], :optional ["filters"]}, :POST {:name "POST", :required [], :optional []}, :DELETE {:name "DELETE", :required [], :optional []}}, :url "/api/2/user/{id}/product/{product_id}", :pathParameters ["id/userId/email" "productId"], :controller "Api/2/User.user_product", :default_output_format "json", :description "Check if a User has access to product or give it to him/her."} {:path "user/{id/userId/email}/products", :valid_output_formats ["json" "jsonp"], :method "*", :name "User:contents", :httpMethods {:GET {:name "GET", :required [], :optional ["filters"]}}, :url "/api/2/user/{id}/products", :pathParameters ["id/userId/email"], :controller "Api/2/User.user_products", :default_output_format "json", :description "List all contents (on client) that user has access to."} {:path "user/{id/userId/email}/trait/{trait}", :valid_output_formats ["json" "jsonp"], :method "*", :name "User:traitDelete", :httpMethods {:DELETE {:name "DELETE", :required ["trait"], :optional []}}, :url "/api/2/user/{id}/trait/{trait}", :pathParameters ["id/userId/email" "trait"], :controller "Api/2/User.user_trait", :default_output_format "json", :description "Delete current trait from user."} {:path "user/{id/userId/email}/traits", :valid_output_formats ["json" "jsonp"], :method "*", :name "User:traitsGetAddUpdate", :httpMethods {:GET {:name "GET", :required [], :optional ["key"]}, :POST {:name "POST", :required ["traits"], :optional []}}, :url "/api/2/user/{id}/traits", :pathParameters ["id/userId/email"], :controller "Api/2/User.user_traits", :default_output_format "json", :description "List/Add/Update the currently saved traits added to the user by the asking client."} {:path "reports/dumps", :valid_output_formats ["json" "jsonp" "xml"], :method "GET", :name "Reports:dumps", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/reports/dumps", :pathParameters [], :controller "Api/2/Reports.dumps", :default_output_format "json", :description "Gets a list of available dumps from the reports database."} {:path "reports/dump/{id}", :valid_output_formats ["json" "tgz"], :method "GET", :name "Reports:dump", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/reports/dump/{id}", :pathParameters ["id"], :controller "Api/2/Reports.dump", :default_output_format "tgz", :description "Gets the dump with the given id in a tarball (a zipped tar)."} {:path "reports/template/{template}", :valid_output_formats ["json" "jsonp" "csv"], :method "GET", :name "Reports:report", :httpMethods {:GET {:name "GET", :required ["from" "to"], :optional ["products"]}}, :url "/api/2/reports/template/{template}", :pathParameters ["template"], :controller "Api/2/Reports.report_from_template", :default_output_format "json", :description "Gets the report with the given id. Products is options and should be comma-separeted."} {:path "anonymous/users", :valid_output_formats ["json"], :method "GET", :name "Anonymous:users", :httpMethods {:GET {:name "GET", :required [], :optional ["since" "until" "offset"]}}, :url "/api/2/anonymous/users", :pathParameters [], :controller "Api/2/anonymous.anonymous_users", :default_output_format "json", :description "Get all anonymous user object changed in the given period"} {:path "discount", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Discount:create", :httpMethods {:POST {:name "POST", :required ["name" "description" "type" "value" "end_time"], :optional ["currency" "redeem_limit" "start_time" "status" "product_id"]}}, :url "/api/2/discount", :pathParameters [], :controller "Api/2/Discount.discount", :default_output_format "json", :description "Create a new discount"} {:path "discount/{id}", :valid_output_formats ["json" "jsonp"], :method "*", :name "Discount:get", :httpMethods {:GET {:name "GET", :required [], :optional []}, :POST {:name "POST", :required [], :optional ["product_id" "name" "description" "type" "value" "currency" "redeem_limit" "start_time" "end_time" "status"]}}, :url "/api/2/discount/{id}", :pathParameters ["id"], :controller "Api/2/Discount.discount", :default_output_format "json", :description "Get a single discount and update"} {:path "discounts", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Discount:list", :httpMethods {:GET {:name "GET", :required [], :optional ["filters"]}}, :url "/api/2/discounts", :pathParameters [], :controller "Api/2/Discount.discounts", :default_output_format "json", :description "List all discounts for client"} {:path "clients", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Client:list", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/clients", :pathParameters [], :controller "Api/2/Client.clients", :default_output_format "json", :description "List all Clients"} {:path "productsettings", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Client:Productsettings", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/productsettings", :pathParameters [], :controller "Api/2/Client.productsettings", :default_output_format "json", :description "Get the client's product settings"} {:path "orders", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Order:search", :httpMethods {:GET {:name "GET", :required [], :optional ["limit" "offset" "sort" "filters" "since" "until" "userId" "status" "ocr" "orderId" "clientReference"]}}, :url "/api/2/orders", :pathParameters [], :controller "Api/2/Order.orders", :default_output_format "json", :description "Search for orders"} {:path "order/{id}", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Order:get", :httpMethods {:GET {:name "GET", :required [], :optional ["filters"]}}, :url "/api/2/order/{id}", :pathParameters ["id"], :controller "Api/2/Order.order", :alias {:id "order_id"}, :default_output_format "json", :description "Get a single order record"} {:path "order/{id}/transactions", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Order:transactions", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/order/{id}/transactions", :pathParameters ["id"], :controller "Api/2/Order.order_transactions", :alias {:id "order_id"}, :default_output_format "json", :description "Get all transactions for one order"} {:path "order/{id}/items", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Order:items", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/order/{id}/items", :pathParameters ["id"], :controller "Api/2/Order.order_items", :alias {:id "order_id"}, :default_output_format "json", :description "Get all items (bought products) on one order"} {:path "order/{id}/status", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Order:status", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/order/{id}/status", :pathParameters ["id"], :controller "Api/2/Order.order_status", :alias {:id "order_id"}, :default_output_format "json", :description "Check the status of an order"} {:path "order/{id}/cancel", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Order:cancel", :httpMethods {:POST {:name "POST", :required [], :optional []}}, :url "/api/2/order/{id}/cancel", :pathParameters ["id"], :controller "Api/2/Order.order_cancel", :alias {:id "order_id"}, :default_output_format "json", :description "Cancel an order (for use with paylinks and multistep payment flow)"} {:path "order/{id}/credit", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Order:credit", :httpMethods {:POST {:name "POST", :required ["description"], :optional ["amount" "orderItemId" "notifyUser"]}}, :url "/api/2/order/{id}/credit", :pathParameters ["id"], :controller "Api/2/Order.order_credit", :alias {:id "order_id"}, :default_output_format "json", :description "Credit an order (for use with paylinks and multistep payment flow)"} {:path "order/{id}/complete", :valid_output_formats ["json"], :method "POST", :name "Order:complete", :httpMethods {:POST {:name "POST", :required [], :optional []}}, :url "/api/2/order/{id}/complete", :pathParameters ["id"], :controller "Api/2/Order.order_complete", :alias {:id "order_id"}, :default_output_format "json", :description "Complete an order (for use with multistep payment flow, requires captures)"} {:path "order/{id}/capture", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Order:capture", :httpMethods {:POST {:name "POST", :required [], :optional ["amount" "orderItemId" "description"]}}, :url "/api/2/order/{id}/capture", :pathParameters ["id"], :controller "Api/2/Order.order_capture", :alias {:id "order_id"}, :default_output_format "json", :description "Capture part or whole of an authorized amount from an order (for use with multistep payment flow)"} {:path "products", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Product:list", :httpMethods {:GET {:name "GET", :required [], :optional ["filters" "productId" "name" "code" "price" "parentProductId" "limit" "offset" "since" "until" "sort"]}}, :url "/api/2/products", :pathParameters [], :controller "Api/2/Product.products", :default_output_format "json", :description "Search for products (for client)"} {:path "product", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Product:create", :httpMethods {:POST {:name "POST", :required ["code" "name" "price" "vat" "paymentOptions" "type" "currency"], :optional ["bundle" "hideItems" "status" "parentProductId" "description" "url" "quantityLimit" "saleStart" "saleStop" "availableStart" "availableStop" "allowMultiSales" "subscriptionPeriod" "subscriptionRenewPrice" "subscriptionRenewPeriod" "subscriptionAutoRenew" "subscriptionAutoRenewLockPeriod" "subscriptionAutoRenewDisabled" "subscriptionGracePeriod" "subscriptionEmailReceiptLimit" "subscriptionFinalEndDate" "subscriptionSurveyUrl"]}}, :url "/api/2/product", :pathParameters [], :controller "Api/2/Product.product", :default_output_format "json", :description "Create a new product template"} {:path "product/{id}", :valid_output_formats ["json" "jsonp"], :method "*", :name "Product:getAndUpdate", :httpMethods {:GET {:name "GET", :required [], :optional []}, :POST {:name "POST", :required [], :optional ["name" "description" "price" "vat" "paymentOptions" "url" "quantityLimit" "status" "availableStart" "availableStop" "saleStart" "saleStop" "hideItems" "allowMultiSales" "subscriptionPeriod" "subscriptionRenewPrice" "subscriptionRenewPeriod" "subscriptionAutoRenew" "subscriptionAutoRenewLockPeriod" "subscriptionAutoRenewDisabled" "subscriptionGracePeriod" "subscriptionEmailReceiptLimit" "subscriptionFinalEndDate" "subscriptionSurveyUrl"]}}, :url "/api/2/product/{id}", :pathParameters ["id"], :controller "Api/2/Product.product", :default_output_format "json", :description "Get a single product template"} {:path "product/{id}/children", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Product:children", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/product/{id}/children", :pathParameters ["id"], :controller "Api/2/Product.product_children", :default_output_format "json", :description "Get all product \"children\" of a product template"} {:path "product/{id}/revisions", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Product:revisions", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/product/{id}/revisions", :pathParameters ["id"], :controller "Api/2/Product.product_revisions", :default_output_format "json", :description "Get older versions of a product template"} {:path "products/parents", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Products:parents", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/products/parents", :pathParameters [], :controller "Api/2/Product.products_parents", :default_output_format "json", :description "Get all \"parent\" products for the client"} {:path "product/{id}/campaigns", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Products:campaigns", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/product/{id}/campaigns", :pathParameters ["id"], :controller "Api/2/Product.product_campaigns", :default_output_format "json", :description "Get a list of all campaigns a product is included in"} {:path "bundle/{id}/product/{product}", :valid_output_formats ["json" "jsonp"], :method "POST", :name "ProductBundleItem:update", :httpMethods {:POST {:name "POST", :required [], :optional ["sort" "price" "vat"]}}, :url "/api/2/bundle/{id}/product/{product}", :pathParameters ["id" "product"], :controller "Api/2/Bundle.bundle_item", :default_output_format "json", :description "Add or Update a Bundle Item"} {:path "bundle/{id}/product/{product}", :valid_output_formats ["json" "jsonp"], :method "DELETE", :name "ProductBundleItem:remove", :httpMethods {:DELETE {:name "DELETE", :required [], :optional []}}, :url "/api/2/bundle/{id}/product/{product}", :pathParameters ["id" "product"], :controller "Api/2/Bundle.bundle_item", :default_output_format "json", :description "Remove a Bundle Item from a Bundle"} {:path "injectable/names", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Injectable:names", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/injectable/names", :pathParameters [], :controller "Api/2/Injectable.token_names", :default_output_format "json", :description "List out token names for client"} {:path "injectable/import", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Injectable:import", :httpMethods {:POST {:name "POST", :required ["tokenName" "content"], :optional []}}, :url "/api/2/injectable/import", :pathParameters [], :controller "Api/2/Injectable.token_import", :default_output_format "json", :description "Import tokens. Content should be a valid json array. ie [123,\"string\",\"1as\"]"} {:path "voucher/{voucherCode}", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Voucher:get", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/voucher/{code}", :pathParameters ["voucherCode"], :controller "Api/2/Voucher.voucher", :default_output_format "json", :description "Returns a voucher code data array, by VOUCHER COD, not ID"} {:path "vouchers/generate/{voucherGroupId}", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Voucher:generate", :httpMethods {:POST {:name "POST", :required [], :optional ["amount"]}}, :url "/api/2/vouchers/generate/{id}", :pathParameters ["voucherGroupId"], :controller "Api/2/Voucher.generate_vouchers", :default_output_format "json", :description ""} {:path "vouchers/handout/{voucherGroupId}", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Voucher:handout", :httpMethods {:POST {:name "POST", :required [], :optional ["amount"]}}, :url "/api/2/vouchers/handout/{id}", :pathParameters ["voucherGroupId"], :controller "Api/2/Voucher.handout_vouchers", :default_output_format "json", :description "Return an amount of vouchers (that will change status to handout and no longer be available."} {:path "voucher_handout", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Voucher:handoutToUser", :httpMethods {:POST {:name "POST", :required ["userId" "voucherGroupId"], :optional []}}, :url "/api/2/voucher_handout", :pathParameters [], :controller "Api/2/Voucher.handout_voucher_to_user", :default_output_format "json", :description "Change status of a voucher to \"handed out\" and set the \"user_id\" on it, making it available only to this user."} {:path "vouchers/groups", :valid_output_formats ["json" "jsonp"], :method "GET", :name "VoucherGroup:list", :httpMethods {:GET {:name "GET", :required [], :optional ["limit" "offset" "title" "campaignId" "type" "productId"]}}, :url "/api/2/vouchers/groups", :pathParameters [], :controller "Api/2/Voucher.voucher_groups", :default_output_format "json", :description "Search for VoucherGroups. Title is exact match. `productId` for type `3`."} {:path "vouchers/group/{voucherGroupId}", :valid_output_formats ["json" "jsonp"], :method "*", :name "VoucherGroup:getAndUpdate", :httpMethods {:GET {:name "GET", :required [], :optional []}, :POST {:name "POST", :required [], :optional ["title" "description" "limit"]}}, :url "/api/2/vouchers/group/{id}", :pathParameters ["voucherGroupId"], :controller "Api/2/Voucher.voucher_group", :default_output_format "json", :description "Get a voucher group and update it. Will return voucher on non-unique."} {:path "vouchers/group", :valid_output_formats ["json" "jsonp"], :method "POST", :name "VoucherGroup:create", :httpMethods {:POST {:name "POST", :required ["title" "type"], :optional ["campaignId" "productId" "description" "unique" "limit" "voucherCode"]}}, :url "/api/2/vouchers/group", :pathParameters [], :controller "Api/2/Voucher.voucher_group", :default_output_format "json", :description "Create new voucher groups."} {:path "campaign/{campaignId}", :valid_output_formats ["json" "jsonp"], :method "*", :name "Campaign:getAndUpdate", :httpMethods {:GET {:name "GET", :required [], :optional []}, :POST {:name "POST", :required [], :optional ["title" "description" "metaData" "status" "startDate" "stopDate" "additionalReceiptInfo" "requireAddress" "requireVoucher" "limit" "products"]}}, :url "/api/2/campaign/{id}", :pathParameters ["campaignId"], :controller "Api/2/Campaign.campaign", :default_output_format "json", :description "Get a single campaign, with all it's products, or push changes to it.`products` must be an array of `productId` and `newPrice`. NB Products part doesnt work in explorer."} {:path "campaign", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Campaign:create", :httpMethods {:POST {:name "POST", :required ["title"], :optional ["description" "metaData" "startDate" "stopDate" "additionalReceiptInfo" "requireAddress" "requireVoucher" "limit" "products"]}}, :url "/api/2/campaign", :pathParameters [], :controller "Api/2/Campaign.campaign", :default_output_format "json", :description ""} {:path "campaigns", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Campaign:list", :httpMethods {:GET {:name "GET", :required [], :optional ["limit" "offset" "sort" "filters" "campaignId" "title" "description" "status"]}}, :url "/api/2/campaigns", :pathParameters [], :controller "Api/2/Campaign.campaigns", :default_output_format "json", :description "List all campaigns for client"} {:path "identifier/{id}", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Identifier:get", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/identifier/{id}", :pathParameters ["id"], :controller "Api/2/Identifier.identifier", :default_output_format "json", :description "Get an identifier by id"} {:path "payment", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Payment:sale", :httpMethods {:POST {:name "POST", :required ["action" "productId" "clientRef" "agreementRef" "hash"], :optional ["price"]}}, :url "/api/2/payment", :pathParameters [], :controller "Api/2/Payment.payment_create", :default_output_format "json", :description "Used by clients to trigger payment on user."} {:path "payment/{id}", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Payment:get", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/payment/{id}", :pathParameters ["id"], :controller "Api/2/Payment.payment", :default_output_format "json", :description "Check status of a payment transaction."} {:path "payments", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Payment:list", :httpMethods {:GET {:name "GET", :required [], :optional ["clientRef" "userId" "productId" "status"]}}, :url "/api/2/payments", :pathParameters [], :controller "Api/2/Payment.payments", :default_output_format "json", :description "Search for payment transactions."} {:path "agreements/{userId}/payment", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Payment:getAgreementsForUser", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/agreements/{id}/payment", :pathParameters ["userId"], :controller "Api/2/Payment.agreements", :default_output_format "json", :description "Get the agreement(s) between the requesting client and a user"} {:path "logins/{id/userId/email}", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Logins per user", :httpMethods {:GET {:name "GET", :required [], :optional ["limit" "since" "offset" "until" "ip" "status"]}}, :url "/api/2/logins/{id}", :pathParameters ["id/userId/email"], :controller "Api/2/User.user_logins", :default_output_format "json", :description "List all (or search for) logins for a user."} {:path "subscriptions", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Subscriptions:search", :httpMethods {:GET {:name "GET", :required [], :optional ["limit" "offset" "sort" "since" "until" "filters" "userId" "status"]}}, :url "/api/2/subscriptions", :pathParameters [], :controller "Api/2/Subscriptions.subscriptions", :default_output_format "json", :description "Search for subscriptions"} {:path "digitalcontents", :valid_output_formats ["json" "jsonp"], :method "GET", :name "DigitalContent:search", :httpMethods {:GET {:name "GET", :required [], :optional ["limit" "offset" "sort" "since" "until" "filters" "userId" "status" "productId" "parentProductId" "orderId"]}}, :url "/api/2/digitalcontents", :pathParameters [], :controller "Api/2/Digitalcontents.digitalcontents", :default_output_format "json", :description "Search for purchased digital content"} {:path "kpis", :valid_output_formats ["json" "jsonp"], :method "GET", :name "KPI:search", :httpMethods {:GET {:name "GET", :required [], :optional ["name" "limit" "offset" "sort" "since" "until"]}}, :url "/api/2/kpis", :pathParameters [], :controller "Api/2/KeyPerformanceIndicator.kpi", :default_output_format "json", :description "Search for KPI"} {:path "paylink", :valid_output_formats ["json" "jsonp"], :method "POST", :name "Paylink:create", :httpMethods {:POST {:name "POST", :required ["title" "items"], :optional ["clientReference" "purchaseFlow" "paymentOptions" "expires" "redirectUri" "cancelUri" "sellerUserId" "buyerUserId"]}}, :url "/api/2/paylink", :pathParameters [], :controller "Api/2/Paylink.paylink", :default_output_format "json", :description "Create Paylink object"} {:path "paylink", :valid_output_formats ["json" "jsonp"], :method "*", :name "Paylink:getAndDelete", :httpMethods {:GET {:name "GET", :required [], :optional []}, :DELETE {:name "DELETE", :required [], :optional []}}, :url "/api/2/paylink/{id}", :pathParameters ["id"], :controller "Api/2/Paylink.paylink", :default_output_format "json", :description "Get Paylink object"} {:path "logins", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Logins search", :httpMethods {:GET {:name "GET", :required [], :optional ["limit" "since" "offset" "until" "ip" "status" "filters"]}}, :url "/api/2/logins", :pathParameters [], :controller "Api/2/User.logins", :default_output_format "json", :description "List all (or search for) logins for a client."} {:path "logout", :valid_output_formats ["json" "jsonp"], :method "GET", :name "Logout", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/2/logout", :pathParameters [], :controller "Api/2/User.logout", :default_output_format "json", :description ""} {:path "api/2/*", :valid_output_formats ["json" "jsonp"], :method "*", :name "Not found error - 404", :httpMethods {:GET {:name "GET", :required [], :optional []}}, :url "/api/*", :pathParameters [], :controller "Api/2/Utility.not_found", :default_output_format "json", :description "Used when requesting API that does not exist"}], :success? true}}