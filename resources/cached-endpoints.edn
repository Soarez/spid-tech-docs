{:data
 [{:path "endpoints",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "List API endpoints",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["name" "url"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses
     [{:status 200,
       :description "A list of endpoint objects",
       :type "[endpoint]"}]}},
   :url "/api/2/endpoints",
   :pathParameters [],
   :controller "Api/2/Utility.endpoints",
   :parameter_descriptions
   {:name
    "The name of the endpoint (see the full endpoint listing for names)",
    :url
    "The url of the endpoint to describe (see the full endpoint listing for names)"},
   :default_output_format "json",
   :description
   "List all API endpoints, or get info on single endpoint (specify name or url).",
   :category ["Utilities" "Platform API"]}
  {:path "describe/{object}",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Describe properties",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["property" "locale"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/describe/{object}",
   :pathParameters ["object"],
   :controller "Api/2/Utility.describe",
   :parameter_descriptions {:object "", :property "", :locale ""},
   :default_output_format "json",
   :description
   "Describe an objects's properties, optionally translated.",
   :category ["Utilities" "Platform API"]}
  {:path "status",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Platform status",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/status",
   :pathParameters [],
   :controller "Api/2/Platform.status",
   :parameter_descriptions {},
   :default_output_format "json",
   :description "Get status information from the platform",
   :category ["Utilities" "Platform API"]}
  {:path "version",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Platform version",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/version",
   :pathParameters [],
   :controller "Api/2/Platform.version",
   :parameter_descriptions {},
   :default_output_format "json",
   :description "Find out what version you are using",
   :category ["Utilities" "Platform API"]}
  {:path "terms",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Platform terms",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/terms",
   :pathParameters [],
   :controller "Api/2/Platform.terms",
   :parameter_descriptions {},
   :default_output_format "json",
   :description
   "Returns the current user terms for the client and SPiD",
   :category ["Utilities" "Platform API"]}
  {:path "qrcode",
   :valid_output_formats ["json" "png"],
   :method "GET",
   :name "Utility:qrcode",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["type" "content" "w" "h"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/qrcode",
   :pathParameters [],
   :controller "Api/2/Utility.qrcode",
   :parameter_descriptions {:type "", :content "", :w "", :h ""},
   :default_output_format "json",
   :description "",
   :category ["Utilities" "Platform API"]}
  {:path "/oauth/exchange",
   :valid_output_formats ["json"],
   :method "POST",
   :name "Exchange",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["clientId" "type"],
     :optional ["redirectUri"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/oauth/exchange",
   :pathParameters [],
   :controller "Api/2/Authorization.exchange",
   :parameter_descriptions {:clientId "", :type "", :redirectUri ""},
   :default_output_format "json",
   :description "Exchanges an authorization code",
   :category ["Authorization" "OAuth"]}
  {:path "url/{action}",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Shorten or lengthen URL",
   :httpMethods
   {:GET
    {:name "GET",
     :required ["url"],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/url/{id}",
   :pathParameters ["action"],
   :controller "Api/2/Utility.url",
   :parameter_descriptions {:action "id/action er det samme", :url ""},
   :default_output_format "json",
   :description "Create, and expand, short version of URIs",
   :category ["Utilities" "Platform API"]}
  {:path "admin/{section}",
   :valid_output_formats ["json" "jsonp" "png"],
   :method "GET",
   :name "Utility:adminBySection",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/admin/{section}",
   :pathParameters ["section"],
   :controller "Api/2/Utility.admin",
   :parameter_descriptions {:section ""},
   :default_output_format "json",
   :description
   "Get list of roles {section}=roles, or acl, {section}=acl",
   :category ["Utilities" "Sysadmin API"]}
  {:path "admin/acl/{role}",
   :valid_output_formats ["json" "jsonp" "png"],
   :method "GET",
   :name "Utility:aclForRole",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/admin/{section}/{id}",
   :pathParameters ["role"],
   :controller "Api/2/Utility.admin",
   :parameter_descriptions {:role ""},
   :default_output_format "json",
   :description
   "Specify a role (ie `watcher`, `admin`) and get acl list",
   :category ["Utilities" "Sysadmin API"]}
  {:path "email_templates",
   :valid_output_formats ["json" "jsonp" "xml"],
   :method "*",
   :name "Email templates",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["locale"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required ["templates"],
     :optional ["locale"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/email_templates",
   :pathParameters [],
   :controller "Api/2/Utility.email_templates",
   :parameter_descriptions {:locale "", :templates ""},
   :default_output_format "json",
   :description "Get and Set email templates",
   :category ["Identity Management" "Email API"]}
  {:path "{type}/{id}/do/{key}",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Do by type, id and key",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :deprecated "2.10",
   :url "/api/2/{type}/{id}/do/{key}",
   :pathParameters ["type" "id" "key"],
   :controller "Api/2/Data.soda",
   :parameter_descriptions {:type "", :id "", :key ""},
   :default_output_format "json",
   :description
   "Data storage endpoint. NB POST does not work with explorer.",
   :category ["Data Storage" "SODA Endpoints"]}
  {:path "{type}/{id}/{subtype}/{subid}/do/{key}",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Do by type, sub type, id and key",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :deprecated "2.10",
   :url "/api/2/{type}/{id}/{subtype}/{subid}/do/{key}",
   :pathParameters ["type" "id" "subtype" "subid" "key"],
   :controller "Api/2/Data.soda",
   :parameter_descriptions
   {:type "", :id "", :subtype "", :subid "", :key ""},
   :default_output_format "json",
   :description
   "Data storage sub endpoint. NB POST does not work with explorer",
   :category ["Data Storage" "SODA Endpoints"]}
  {:path "user/{id}/dataobject/{key}",
   :valid_output_formats ["json"],
   :method "*",
   :name "Get, update, and delete by user",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required ["value"],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :DELETE
    {:name "DELETE",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/dataobject/{key}",
   :pathParameters ["id" "key"],
   :controller "Api/2/DataObject.user_dataobject",
   :parameter_descriptions {:id "", :key "", :value ""},
   :default_output_format "json",
   :description "Data storage endpoint for user.",
   :category ["Data Storage" "DataObjects API"]}
  {:path "user/{id}/dataobjects",
   :valid_output_formats ["json"],
   :method "*",
   :name "List by user",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["key" "limit" "since" "offset" "until" "sort" "filters"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/dataobjects",
   :pathParameters ["id"],
   :controller "Api/2/DataObject.user_dataobjects",
   :parameter_descriptions
   {:id "",
    :key "",
    :limit "",
    :since "",
    :offset "",
    :until "",
    :sort "",
    :filters ""},
   :default_output_format "json",
   :description "Data storage list endpoint for user.",
   :category ["Data Storage" "DataObjects API"]}
  {:path "dataobjects",
   :valid_output_formats ["json"],
   :method "*",
   :name "List",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["key" "limit" "since" "offset" "until" "sort" "filters"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/dataobjects",
   :pathParameters [],
   :controller "Api/2/DataObject.dataobjects",
   :parameter_descriptions
   {:key "",
    :limit "",
    :since "",
    :offset "",
    :until "",
    :sort "",
    :filters ""},
   :default_output_format "json",
   :description "Data storage list endpoint.",
   :category ["Data Storage" "DataObjects API"]}
  {:path "email/{email}/status",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Status",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/email/{email}/status",
   :pathParameters ["email"],
   :controller "Api/2/Email.email_status",
   :parameter_descriptions {:email ""},
   :default_output_format "json",
   :description
   "Check if email exists in SPiD, is verified or available",
   :category ["Identity Management" "Email API"]}
  {:path "me",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Me",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses
     [{:status 200, :description "The user object", :type "user"}]}},
   :url "/api/2/me",
   :pathParameters [],
   :controller "Api/2/User.me",
   :parameter_descriptions {},
   :default_output_format "json",
   :description "Fetch the authorized requesting user.",
   :category ["Identity Management" "User API"]}
  {:path "me/vouchers",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "My vouchers",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/me/vouchers",
   :pathParameters [],
   :controller "Api/2/User.my_vouchers",
   :parameter_descriptions {},
   :default_output_format "json",
   :description "Get the vouchers for the requesting user ",
   :category ["Payment Services" "Voucher API"]}
  {:path "user",
   :valid_output_formats ["json" "jsonp" "png"],
   :method "POST",
   :name "Create user",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["email"],
     :optional
     ["displayName"
      "name"
      "birthday"
      "addresses"
      "gender"
      "photo"
      "preferredUsername"
      "url"
      "utcOffset"
      "redirectUri"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type "user"}]}},
   :url "/api/2/user",
   :pathParameters [],
   :controller "Api/2/User.user",
   :parameter_descriptions
   {:gender "",
    :name "",
    :photo "",
    :displayName "",
    :utcOffset "",
    :url "",
    :preferredUsername "",
    :addresses "",
    :birthday "",
    :redirectUri ""},
   :default_output_format "json",
   :description "Create a new user",
   :category ["Identity Management" "User API"]}
  {:path "signup",
   :valid_output_formats ["json"],
   :method "POST",
   :name "Signup",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["email"],
     :optional ["password" "redirectUri"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/signup",
   :pathParameters [],
   :controller "Api/2/User.user_signup",
   :parameter_descriptions {:email "", :password "", :redirectUri ""},
   :default_output_format "json",
   :description "Create a new user (no update)",
   :category ["Identity Management" "User API"]}
  {:path "signup_jwt",
   :valid_output_formats ["json"],
   :method "POST",
   :name "Signup JWT",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["jwt"],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/signup_jwt",
   :pathParameters [],
   :controller "Api/2/User.user_signup_jwt",
   :parameter_descriptions {:jwt ""},
   :default_output_format "json",
   :description "Create a new user (no update) from a JWT",
   :category ["Identity Management" "User API"]}
  {:path "attach_jwt",
   :valid_output_formats ["json"],
   :method "POST",
   :name "Attach JWT",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["jwt"],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/attach_jwt",
   :pathParameters [],
   :controller "Api/2/User.user_attach_jwt",
   :parameter_descriptions {:jwt ""},
   :default_output_format "json",
   :description "Attaches a thirdparty account from a JWT to a user",
   :category ["Identity Management" "User API"]}
  {:path "user/{id/userId/email}/varnishId",
   :valid_output_formats ["json"],
   :method "GET",
   :name "Get Varnish id",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/varnishId",
   :pathParameters ["id/userId/email"],
   :controller "Api/2/User.user_varnish",
   :parameter_descriptions {:id/userId/email ""},
   :default_output_format "json",
   :description "Get the varnish id for a user",
   :category ["Identity Management" "User API"]}
  {:path "user/{id/userId/email}",
   :valid_output_formats ["json" "jsonp" "png"],
   :method "*",
   :name "Get and update",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required [],
     :optional
     ["displayName"
      "name"
      "birthday"
      "addresses"
      "gender"
      "photo"
      "preferredUsername"
      "url"
      "utcOffset"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}",
   :pathParameters ["id/userId/email"],
   :controller "Api/2/User.user",
   :parameter_descriptions
   {:gender "",
    :name "",
    :photo "",
    :displayName "",
    :utcOffset "",
    :url "",
    :preferredUsername "",
    :addresses "",
    :birthday "",
    :id/userId/email ""},
   :default_output_format "json",
   :description "Get a user data object or post changes to one.",
   :category ["Identity Management" "User API"]}
  {:path "user/{userId}/charge",
   :valid_output_formats ["json"],
   :method "POST",
   :name "Direct payment charge",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["hash" "requestReference" "items"],
     :optional
     ["clientReference"
      "paymentOptions"
      "purchaseFlow"
      "sellerUserId"
      "tag"
      "type"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/charge",
   :pathParameters ["userId"],
   :controller "Api/2/User.user_charge",
   :parameter_descriptions
   {:userId "",
    :clientReference "",
    :paymentOptions "",
    :purchaseFlow "",
    :sellerUserId "",
    :tag "",
    :type ""},
   :default_output_format "json",
   :description "Request a direct payment charge on a user.",
   :category ["Payment Services" "Direct Payment API"]}
  {:path "user/{userId}/balance",
   :valid_output_formats ["json"],
   :method "GET",
   :name "Account balance",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/balance",
   :pathParameters ["userId"],
   :controller "Api/2/User.user_balance",
   :parameter_descriptions {:userId ""},
   :default_output_format "json",
   :description "Retrieve account balance for a user.",
   :category ["Payment Services" "Direct Payment API"]}
  {:path "user/{userId/email}/payment/settings",
   :valid_output_formats ["json"],
   :method "GET",
   :name "Payment settings",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/payment/settings",
   :pathParameters ["userId/email"],
   :controller "Api/2/User.user_payment_settings",
   :parameter_descriptions {:userId/email ""},
   :default_output_format "json",
   :description "Request payment settings for a user.",
   :category ["Payment Services" "Direct Payment API"]}
  {:path "user/{userId}/preferences/payment",
   :valid_output_formats ["json"],
   :method "GET",
   :name "Payment preference",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/preferences/payment",
   :pathParameters ["userId"],
   :controller "Api/2/User.user_preferences_payment",
   :parameter_descriptions {:userId ""},
   :default_output_format "json",
   :description
   "Request the payment preferences for direct payment charges on a user.",
   :category ["Payment Services" "Direct Payment API"]}
  {:path "users",
   :valid_output_formats ["json" "jsonp" "png"],
   :method "GET",
   :name "List users",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["limit"
      "since"
      "offset"
      "until"
      "fields"
      "sort"
      "filters"
      "id"
      "userId"
      "email"
      "emails"
      "emails_regex"
      "displayName"
      "givenName"
      "familyName"
      "fullName"
      "preferredUsername"
      "phoneNumber"
      "phoneNumbers"
      "gender"
      "birthday"
      "address_formatted"
      "address_postalCode"
      "address_country"
      "address_region"
      "address_locality"
      "address_streetAddress"
      "orderId"
      "paymentIdentifier"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/users",
   :pathParameters [],
   :controller "Api/2/User.users",
   :parameter_descriptions
   {:gender "",
    :givenName "",
    :userId "",
    :emails_regex "",
    :orderId "",
    :familyName "",
    :address_streetAddress "",
    :address_formatted "",
    :phoneNumber "",
    :displayName "",
    :emails "",
    :address_postalCode "",
    :email "",
    :fullName "",
    :address_region "",
    :address_country "",
    :preferredUsername "",
    :address_locality "",
    :paymentIdentifier "",
    :id "",
    :phoneNumbers "",
    :birthday ""},
   :default_output_format "json",
   :description "List for users",
   :category ["Identity Management" "User API"]}
  {:path "search/users",
   :valid_output_formats ["json"],
   :method "GET",
   :name "Search users",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["filters"
      "clientId"
      "query"
      "id"
      "userId"
      "email"
      "displayName"
      "givenName"
      "familyName"
      "fullName"
      "preferredUsername"
      "gender"
      "birthyear"
      "emails"
      "phoneNumber"
      "phoneNumbers"
      "address"
      "homeAddress"
      "invoiceAddress"
      "deliveryAddress"
      "status"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/search/users",
   :pathParameters [],
   :controller "Api/2/Search.search_users",
   :parameter_descriptions
   {:status "",
    :gender "",
    :homeAddress "",
    :givenName "",
    :clientId "",
    :userId "",
    :deliveryAddress "",
    :familyName "",
    :phoneNumber "",
    :displayName "",
    :emails "",
    :email "",
    :invoiceAddress "",
    :fullName "",
    :preferredUsername "",
    :address "",
    :query "",
    :id "",
    :birthyear "",
    :phoneNumbers ""},
   :default_output_format "json",
   :description
   "Search for users by individual attributes and/or full-text",
   :category ["Identity Management" "User API"]}
  {:path "search/users/{query}",
   :valid_output_formats ["json"],
   :method "GET",
   :name "User full-text search",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["filters" "clientId"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :deprecated "2.10",
   :url "/api/2/search/users/{query}",
   :pathParameters ["query"],
   :controller "Api/2/Search.search_users",
   :parameter_descriptions
   {:filters "", :clientId "", :query "Full-text search query"},
   :default_output_format "json",
   :description
   "Full-text search for users. Use /search/users instead.",
   :category ["Identity Management" "User API"]}
  {:path "user/{id/userId/email}/logins",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "List logins",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["limit" "since" "offset" "until" "ip" "status"],
     :access_token_types ["server"],
     :filters ["merchant"],
     :default_filters [],
     :responses
     [{:status 200,
       :description "A list of login attempt objects",
       :type "[login_attempt]"}]}},
   :url "/api/2/user/{id}/logins",
   :pathParameters ["id/userId/email"],
   :controller "Api/2/User.user_logins",
   :parameter_descriptions
   {:id/userId/email
    "Only show login attempts from the user with this id, userid or email",
    :ip "Only show login attempts from this IP address",
    :status
    "Only show successful (`true`) or failed (`false`) logins"},
   :default_output_format "json",
   :description "List all (or search for) logins for a user",
   :category ["Identity Management" "Login API"]}
  {:path "user/{id/userId/email}/trigger/{trigger}",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Trigger",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/trigger/{trigger}",
   :pathParameters ["id/userId/email" "trigger"],
   :controller "Api/2/User.user_trigger",
   :parameter_descriptions {:id/userId/email "", :trigger ""},
   :default_output_format "json",
   :description
   "Trigger a `newpassword` or `emailverification` for user",
   :category ["Identity Management" "User API"]}
  {:path "user/{id/userId/email}/order/{orderId}",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Get order",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/order/{<\\d+>order_id}",
   :pathParameters ["id/userId/email" "orderId"],
   :controller "Api/2/User.user_order",
   :parameter_descriptions {:id/userId/email "", :orderId ""},
   :default_output_format "json",
   :description "Get a single order for user.",
   :category ["Payment Services" "Order API"]}
  {:path "user/{id/userId/email}/orders",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "List orders",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["status" "filters"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/orders",
   :pathParameters ["id/userId/email"],
   :controller "Api/2/User.user_orders",
   :alias {:id "user_id"},
   :parameter_descriptions
   {:id/userId/email "", :status "", :filters ""},
   :default_output_format "json",
   :description "List orders for a user (on client)",
   :category ["Payment Services" "Order API"]}
  {:path "user/{id/userId/email}/order/{orderId}/credit",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Credit user order",
   :httpMethods
   {:POST
    {:name "POST",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :deprecated "2.10",
   :url "/api/2/user/{id}/order/{<\\d+>order_id}/credit",
   :pathParameters ["id/userId/email" "orderId"],
   :controller "Api/2/User.user_order_credit",
   :parameter_descriptions {:id/userId/email "", :orderId ""},
   :default_output_format "json",
   :description "Deprecated! Use /order/{orderId}/credit",
   :category ["Payment Services" "Order API"]}
  {:path "user/{id/userId/email}/transactions",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "List user transactions",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/transactions",
   :pathParameters ["id/userId/email"],
   :controller "Api/2/User.user_transactions",
   :parameter_descriptions {:id/userId/email ""},
   :default_output_format "json",
   :description "List all money transactions related to a user",
   :category ["Payment Services" "Order API"]}
  {:path "user/{id/userId/email}/subscription",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Create user subscription",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["productId"],
     :optional ["startDate" "orderId" "expires"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/subscription",
   :pathParameters ["id/userId/email"],
   :controller "Api/2/User.user_subscription",
   :parameter_descriptions
   {:id/userId/email "",
    :productId "",
    :startDate "",
    :orderId "",
    :0 "expires"},
   :default_output_format "json",
   :description "Create a new user subscription for a user",
   :category ["Payment Services" "Subscription API"]}
  {:path "user/{id/userId/email}/subscription/{subscriptionId}",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Manage user subscription",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required ["autoRenew"],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :DELETE
    {:name "DELETE",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/subscription/{<\\d+>subscription_id}",
   :pathParameters ["id/userId/email" "subscriptionId"],
   :controller "Api/2/User.user_subscription",
   :parameter_descriptions
   {:id/userId/email "", :subscriptionId "", :autoRenew ""},
   :default_output_format "json",
   :description "Get, Update or (soft)delete a User subscription.",
   :category ["Payment Services" "Subscription API"]}
  {:path "user/{id/userId/email}/subscriptions",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "List subscriptions",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["filters"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/subscriptions",
   :pathParameters ["id/userId/email"],
   :controller "Api/2/User.user_subscriptions",
   :parameter_descriptions {:id/userId/email ""},
   :default_output_format "json",
   :description "List all subscriptions (on client) for user",
   :category ["Payment Services" "Subscription API"]}
  {:path "user/{id/userId/email}/product/{productId}",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Manage digital content access",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["filters"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :DELETE
    {:name "DELETE",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/product/{product_id}",
   :pathParameters ["id/userId/email" "productId"],
   :controller "Api/2/User.user_product",
   :parameter_descriptions {:id/userId/email "", :productId ""},
   :default_output_format "json",
   :description
   "Check if a User has access to product or give it to him/her.",
   :category ["Payment Services" "Digital Contents API"]}
  {:path "user/{id/userId/email}/products",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "List contents",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["filters"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/products",
   :pathParameters ["id/userId/email"],
   :controller "Api/2/User.user_products",
   :parameter_descriptions {:id/userId/email ""},
   :default_output_format "json",
   :description
   "List all contents (on client) that user has access to.",
   :category ["Payment Services" "Digital Contents API"]}
  {:path "user/{id/userId/email}/trait/{trait}",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Delete user trait",
   :httpMethods
   {:DELETE
    {:name "DELETE",
     :required ["trait"],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/trait/{trait}",
   :pathParameters ["id/userId/email" "trait"],
   :controller "Api/2/User.user_trait",
   :parameter_descriptions {:id/userId/email "", :trait ""},
   :default_output_format "json",
   :description "Delete current trait from user.",
   :category ["Data Storage" "Traits API"]}
  {:path "user/{id/userId/email}/traits",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "List and manage user traits",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["key"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required ["traits"],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/user/{id}/traits",
   :pathParameters ["id/userId/email"],
   :controller "Api/2/User.user_traits",
   :parameter_descriptions {:id/userId/email "", :key "", :traits ""},
   :default_output_format "json",
   :description
   "List/Add/Update the currently saved traits added to the user by the asking client.",
   :category ["Data Storage" "Traits API"]}
  {:path "reports/dumps",
   :valid_output_formats ["json" "jsonp" "xml"],
   :method "GET",
   :name "List dumps",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/reports/dumps",
   :pathParameters [],
   :controller "Api/2/Reports.dumps",
   :parameter_descriptions {},
   :default_output_format "json",
   :description
   "Get a list of available dumps from the reports database.",
   :category ["Insight" "Report Database API"]}
  {:path "reports/dump/{id}",
   :valid_output_formats ["json" "tgz"],
   :method "GET",
   :name "Get dump",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/reports/dump/{id}",
   :pathParameters ["id"],
   :controller "Api/2/Reports.dump",
   :parameter_descriptions {:id ""},
   :default_output_format "tgz",
   :description
   "Gets the dump with the given id in a tarball (a zipped tar).",
   :category ["Insight" "Report Database API"]}
  {:path "reports/template/{template}",
   :valid_output_formats ["json" "jsonp" "csv"],
   :method "GET",
   :name "Get report",
   :httpMethods
   {:GET
    {:name "GET",
     :required ["from" "to"],
     :optional ["products"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/reports/template/{template}",
   :pathParameters ["template"],
   :controller "Api/2/Reports.report_from_template",
   :parameter_descriptions
   {:template "", :from "", :to "", :products ""},
   :default_output_format "json",
   :description
   "Gets the report with the given id. Products is options and should be comma-separeted.",
   :category ["Insight" "Report Database API"]}
  {:path "anonymous/users",
   :valid_output_formats ["json"],
   :method "GET",
   :name "Anonymous:users",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["since" "until" "offset"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/anonymous/users",
   :pathParameters [],
   :controller "Api/2/anonymous.anonymous_users",
   :parameter_descriptions {},
   :default_output_format "json",
   :description
   "Get all anonymous user objects changed in the given period",
   :category ["Identity Management" "User API"]}
  {:path "discount",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Add discount",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["name" "description" "type" "value" "end_time"],
     :optional
     ["currency" "redeem_limit" "start_time" "status" "product_id"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/discount",
   :pathParameters [],
   :controller "Api/2/Discount.discount",
   :parameter_descriptions
   {:status "",
    :currency "",
    :name "",
    :start_time "",
    :end_time "",
    :redeem_limit "",
    :product_id "",
    :type "",
    :value "",
    :description ""},
   :default_output_format "json",
   :description "Create a new discount",
   :category ["Payment Services" "Discount API"]}
  {:path "discount/{id}",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Get discount",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required [],
     :optional
     ["product_id"
      "name"
      "description"
      "type"
      "value"
      "currency"
      "redeem_limit"
      "start_time"
      "end_time"
      "status"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/discount/{id}",
   :pathParameters ["id"],
   :controller "Api/2/Discount.discount",
   :parameter_descriptions
   {:status "",
    :currency "",
    :name "",
    :start_time "",
    :end_time "",
    :redeem_limit "",
    :product_id "",
    :type "",
    :id "",
    :value "",
    :description ""},
   :default_output_format "json",
   :description "Get a single discount and update",
   :category ["Payment Services" "Discount API"]}
  {:path "discounts",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "List discounts",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["filters"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/discounts",
   :pathParameters [],
   :controller "Api/2/Discount.discounts",
   :parameter_descriptions {},
   :default_output_format "json",
   :description "List all discounts for client",
   :category ["Payment Services" "Discount API"]}
  {:path "clients",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "List clients",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/clients",
   :pathParameters [],
   :controller "Api/2/Client.clients",
   :parameter_descriptions {},
   :default_output_format "json",
   :description "List all clients",
   :category ["Utilities" "Platform API"]}
  {:path "productsettings",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Get product settings",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/productsettings",
   :pathParameters [],
   :controller "Api/2/Client.productsettings",
   :parameter_descriptions {},
   :default_output_format "json",
   :description "Get the client's product settings",
   :category ["Payment Services" "Product API"]}
  {:path "orders",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Search orders",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["limit"
      "offset"
      "sort"
      "filters"
      "since"
      "until"
      "userId"
      "status"
      "ocr"
      "orderId"
      "clientReference"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/orders",
   :pathParameters [],
   :controller "Api/2/Order.orders",
   :parameter_descriptions
   {:userId "", :status "", :ocr "", :orderId "", :clientReference ""},
   :default_output_format "json",
   :description "Search for orders",
   :category ["Payment Services" "Order API"]}
  {:path "order/{id}",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Get order",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["filters"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/order/{id}",
   :pathParameters ["id"],
   :controller "Api/2/Order.order",
   :alias {:id "order_id"},
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description "Get a single order record",
   :category ["Payment Services" "Order API"]}
  {:path "order/{id}/transactions",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Get order transactions",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/order/{id}/transactions",
   :pathParameters ["id"],
   :controller "Api/2/Order.order_transactions",
   :alias {:id "order_id"},
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description "Get all transactions for one order",
   :category ["Payment Services" "Order API"]}
  {:path "order/{id}/items",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Get order items",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/order/{id}/items",
   :pathParameters ["id"],
   :controller "Api/2/Order.order_items",
   :alias {:id "order_id"},
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description "Get all items (bought products) on one order",
   :category ["Payment Services" "Order API"]}
  {:path "order/{id}/status",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Order status",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/order/{id}/status",
   :pathParameters ["id"],
   :controller "Api/2/Order.order_status",
   :alias {:id "order_id"},
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description "Check the status of an order",
   :category ["Payment Services" "Order API"]}
  {:path "order/{id}/cancel",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Cancel order",
   :httpMethods
   {:POST
    {:name "POST",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/order/{id}/cancel",
   :pathParameters ["id"],
   :controller "Api/2/Order.order_cancel",
   :alias {:id "order_id"},
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description
   "Cancel an order (for use with paylinks and multistep payment flow)",
   :category ["Payment Services" "Order API"]}
  {:path "order/{id}/credit",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Credit order",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["description"],
     :optional ["amount" "orderItemId" "notifyUser"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/order/{id}/credit",
   :pathParameters ["id"],
   :controller "Api/2/Order.order_credit",
   :alias {:id "order_id"},
   :parameter_descriptions
   {:id "",
    :description "",
    :amount "",
    :orderItemId "",
    :notifyUser ""},
   :default_output_format "json",
   :description
   "Credit an order (for use with paylinks and multistep payment flow)",
   :category ["Payment Services" "Order API"]}
  {:path "order/{id}/complete",
   :valid_output_formats ["json"],
   :method "POST",
   :name "Complete order",
   :httpMethods
   {:POST
    {:name "POST",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/order/{id}/complete",
   :pathParameters ["id"],
   :controller "Api/2/Order.order_complete",
   :alias {:id "order_id"},
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description
   "Complete an order (for use with multistep payment flow, requires captures)",
   :category ["Payment Services" "Order API"]}
  {:path "order/{id}/capture",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Capture order",
   :httpMethods
   {:POST
    {:name "POST",
     :required [],
     :optional ["amount" "orderItemId" "description"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/order/{id}/capture",
   :pathParameters ["id"],
   :controller "Api/2/Order.order_capture",
   :alias {:id "order_id"},
   :parameter_descriptions
   {:id "", :amount "", :orderItemId "", :description ""},
   :default_output_format "json",
   :description
   "Capture part or whole of an authorized amount from an order (for use with multistep payment flow)",
   :category ["Payment Services" "Order API"]}
  {:path "products",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Search products",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["filters"
      "productId"
      "name"
      "code"
      "price"
      "parentProductId"
      "limit"
      "offset"
      "since"
      "until"
      "sort"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/products",
   :pathParameters [],
   :controller "Api/2/Product.products",
   :parameter_descriptions
   {:productId "", :name "", :code "", :price "", :parentProductId ""},
   :default_output_format "json",
   :description "Search for products (for client)",
   :category ["Payment Services" "Product API"]}
  {:path "product",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Create product",
   :httpMethods
   {:POST
    {:name "POST",
     :required
     ["code" "name" "price" "vat" "paymentOptions" "type" "currency"],
     :optional
     ["bundle"
      "hideItems"
      "status"
      "parentProductId"
      "description"
      "url"
      "quantityLimit"
      "saleStart"
      "saleStop"
      "availableStart"
      "availableStop"
      "allowMultiSales"
      "subscriptionPeriod"
      "subscriptionRenewPrice"
      "subscriptionRenewPeriod"
      "subscriptionAutoRenew"
      "subscriptionAutoRenewLockPeriod"
      "subscriptionAutoRenewDisabled"
      "subscriptionGracePeriod"
      "subscriptionEmailReceiptLimit"
      "subscriptionFinalEndDate"
      "subscriptionSurveyUrl"],
     :access_token_types ["server"],
     :filters ["merchant"],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/product",
   :pathParameters [],
   :controller "Api/2/Product.product",
   :parameter_descriptions
   {:subscriptionSurveyUrl "",
    :status "",
    :subscriptionAutoRenewLockPeriod "",
    :vat "",
    :currency "",
    :subscriptionFinalEndDate "",
    :name "",
    :parentProductId "",
    :saleStart "",
    :subscriptionGracePeriod "",
    :subscriptionPeriod "",
    :availableStop "",
    :subscriptionAutoRenew "",
    :code "",
    :saleStop "",
    :bundle "",
    :url "",
    :subscriptionEmailReceiptLimit "",
    :subscriptionRenewPeriod "",
    :type "",
    :subscriptionAutoRenewDisabled "",
    :subscriptionRenewPrice "",
    :hideItems "",
    :paymentOptions "",
    :price "",
    :allowMultiSales "",
    :description "",
    :quantityLimit "",
    :availableStart ""},
   :default_output_format "json",
   :description "Create a new product template",
   :category ["Payment Services" "Product API"]}
  {:path "product/{id}",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Get/update product",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required [],
     :optional
     ["name"
      "description"
      "price"
      "vat"
      "paymentOptions"
      "url"
      "quantityLimit"
      "status"
      "availableStart"
      "availableStop"
      "saleStart"
      "saleStop"
      "hideItems"
      "allowMultiSales"
      "subscriptionPeriod"
      "subscriptionRenewPrice"
      "subscriptionRenewPeriod"
      "subscriptionAutoRenew"
      "subscriptionAutoRenewLockPeriod"
      "subscriptionAutoRenewDisabled"
      "subscriptionGracePeriod"
      "subscriptionEmailReceiptLimit"
      "subscriptionFinalEndDate"
      "subscriptionSurveyUrl"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/product/{id}",
   :pathParameters ["id"],
   :controller "Api/2/Product.product",
   :parameter_descriptions
   {:subscriptionSurveyUrl "",
    :status "",
    :subscriptionAutoRenewLockPeriod "",
    :vat "",
    :subscriptionFinalEndDate "",
    :name "",
    :saleStart "",
    :subscriptionGracePeriod "",
    :subscriptionPeriod "",
    :availableStop "",
    :subscriptionAutoRenew "",
    :saleStop "",
    :url "",
    :subscriptionEmailReceiptLimit "",
    :subscriptionRenewPeriod "",
    :subscriptionAutoRenewDisabled "",
    :subscriptionRenewPrice "",
    :hideItems "",
    :paymentOptions "",
    :price "",
    :id "",
    :allowMultiSales "",
    :description "",
    :quantityLimit "",
    :availableStart ""},
   :default_output_format "json",
   :description "Get a single product template",
   :category ["Payment Services" "Product API"]}
  {:path "product/{id}/children",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Product children",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/product/{id}/children",
   :pathParameters ["id"],
   :controller "Api/2/Product.product_children",
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description "Get all product \"children\" of a product template",
   :category ["Payment Services" "Product API"]}
  {:path "product/{id}/revisions",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Product revisions",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/product/{id}/revisions",
   :pathParameters ["id"],
   :controller "Api/2/Product.product_revisions",
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description "Get older versions of a product template",
   :category ["Payment Services" "Product API"]}
  {:path "products/parents",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Product parents",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/products/parents",
   :pathParameters [],
   :controller "Api/2/Product.products_parents",
   :parameter_descriptions {},
   :default_output_format "json",
   :description "Get all \"parent\" products for the client",
   :category ["Payment Services" "Product API"]}
  {:path "product/{id}/campaigns",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Product campaigns",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/product/{id}/campaigns",
   :pathParameters ["id"],
   :controller "Api/2/Product.product_campaigns",
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description "Get a list of all campaigns a product is included in",
   :category ["Payment Services" "Product API"]}
  {:path "bundle/{id}/product/{product}",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Update product bundle item",
   :httpMethods
   {:POST
    {:name "POST",
     :required [],
     :optional ["sort" "price" "vat"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/bundle/{id}/product/{product}",
   :pathParameters ["id" "product"],
   :controller "Api/2/Bundle.bundle_item",
   :parameter_descriptions {:id "", :product ""},
   :default_output_format "json",
   :description "Add or Update a Bundle Item",
   :category ["Payment Services" "Bundle API"]}
  {:path "bundle/{id}/product/{product}",
   :valid_output_formats ["json" "jsonp"],
   :method "DELETE",
   :name "Remove product bundle item",
   :httpMethods
   {:DELETE
    {:name "DELETE",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/bundle/{id}/product/{product}",
   :pathParameters ["id" "product"],
   :controller "Api/2/Bundle.bundle_item",
   :parameter_descriptions {:id "", :product ""},
   :default_output_format "json",
   :description "Remove a Bundle Item from a Bundle",
   :category ["Payment Services" "Bundle API"]}
  {:path "injectable/names",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "List token names",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/injectable/names",
   :pathParameters [],
   :controller "Api/2/Injectable.token_names",
   :parameter_descriptions {},
   :default_output_format "json",
   :description "List out token names for client",
   :category ["Payment Services" "InjectToken API"]}
  {:path "injectable/import",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Import tokens",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["tokenName" "content"],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/injectable/import",
   :pathParameters [],
   :controller "Api/2/Injectable.token_import",
   :parameter_descriptions {:tokenName "", :content ""},
   :default_output_format "json",
   :description
   "Content should be a valid json array. ie [123,\"string\",\"1as\"]",
   :category ["Payment Services" "InjectToken API"]}
  {:path "voucher/{voucherCode}",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Get voucher",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/voucher/{code}",
   :pathParameters ["voucherCode"],
   :controller "Api/2/Voucher.voucher",
   :parameter_descriptions {:voucherCode ""},
   :default_output_format "json",
   :description
   "Returns a voucher code data array, by VOUCHER COD, not ID",
   :category ["Payment Services" "Voucher API"]}
  {:path "vouchers/generate/{voucherGroupId}",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Generate voucher",
   :httpMethods
   {:POST
    {:name "POST",
     :required [],
     :optional ["amount"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/vouchers/generate/{id}",
   :pathParameters ["voucherGroupId"],
   :controller "Api/2/Voucher.generate_vouchers",
   :parameter_descriptions {:voucherGroupId "", :amount ""},
   :default_output_format "json",
   :description "",
   :category ["Payment Services" "Voucher API"]}
  {:path "vouchers/handout/{voucherGroupId}",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Handout vouchers",
   :httpMethods
   {:POST
    {:name "POST",
     :required [],
     :optional ["amount"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/vouchers/handout/{id}",
   :pathParameters ["voucherGroupId"],
   :controller "Api/2/Voucher.handout_vouchers",
   :parameter_descriptions {:voucherGroupId "", :amount ""},
   :default_output_format "json",
   :description
   "Return an amount of vouchers (that will change status to handout and no longer be available).",
   :category ["Payment Services" "Voucher API"]}
  {:path "voucher_handout",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Handout voucher to user",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["userId" "voucherGroupId"],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/voucher_handout",
   :pathParameters [],
   :controller "Api/2/Voucher.handout_voucher_to_user",
   :parameter_descriptions {:userId "", :voucherGroupId ""},
   :default_output_format "json",
   :description
   "Change status of a voucher to \"handed out\" and set the \"user_id\" on it, making it available only to this user.",
   :category ["Payment Services" "Voucher API"]}
  {:path "vouchers/groups",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "List voucher groups",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["limit" "offset" "title" "campaignId" "type" "productId"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/vouchers/groups",
   :pathParameters [],
   :controller "Api/2/Voucher.voucher_groups",
   :parameter_descriptions
   {:limit "",
    :offset "",
    :title "",
    :campaignId "",
    :type "",
    :productId ""},
   :default_output_format "json",
   :description
   "Search for VoucherGroups. Title is exact match. `productId` for type `3`.",
   :category ["Payment Services" "Voucher API"]}
  {:path "vouchers/group/{voucherGroupId}",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Get and update voucher group",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required [],
     :optional ["title" "description" "limit"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/vouchers/group/{id}",
   :pathParameters ["voucherGroupId"],
   :controller "Api/2/Voucher.voucher_group",
   :parameter_descriptions
   {:voucherGroupId "", :title "", :description "", :limit ""},
   :default_output_format "json",
   :description
   "Get a voucher group and update it. Will return voucher on non-unique.",
   :category ["Payment Services" "Voucher API"]}
  {:path "vouchers/group",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Create voucher group",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["title" "type"],
     :optional
     ["campaignId"
      "productId"
      "description"
      "unique"
      "limit"
      "voucherCode"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/vouchers/group",
   :pathParameters [],
   :controller "Api/2/Voucher.voucher_group",
   :parameter_descriptions
   {:title "",
    :type "",
    :campaignId "",
    :productId "",
    :description "",
    :unique "",
    :limit "",
    :voucherCode ""},
   :default_output_format "json",
   :description "Create new voucher groups.",
   :category ["Payment Services" "Voucher API"]}
  {:path "campaign/{campaignId}",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Get and update campaign",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]},
    :POST
    {:name "POST",
     :required [],
     :optional
     ["title"
      "description"
      "metaData"
      "status"
      "startDate"
      "stopDate"
      "additionalReceiptInfo"
      "requireAddress"
      "requireVoucher"
      "limit"
      "products"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/campaign/{id}",
   :pathParameters ["campaignId"],
   :controller "Api/2/Campaign.campaign",
   :parameter_descriptions
   {:status "",
    :additionalReceiptInfo "",
    :requireVoucher "",
    :startDate "",
    :products "",
    :title "",
    :limit "",
    :stopDate "",
    :campaignId "",
    :requireAddress "",
    :metaData "",
    :description ""},
   :default_output_format "json",
   :description
   "Get a single campaign, with all it's products, or push changes to it.`products` must be an array of `productId` and `newPrice`. NB Products part doesnt work in explorer.",
   :category ["Payment Services" "Campaign API"]}
  {:path "campaign",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Create campaign",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["title"],
     :optional
     ["description"
      "metaData"
      "startDate"
      "stopDate"
      "additionalReceiptInfo"
      "requireAddress"
      "requireVoucher"
      "limit"
      "products"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/campaign",
   :pathParameters [],
   :controller "Api/2/Campaign.campaign",
   :parameter_descriptions
   {:additionalReceiptInfo "",
    :requireVoucher "",
    :startDate "",
    :products "",
    :limit "",
    :stopDate "",
    :requireAddress "",
    :metaData "",
    :description ""},
   :default_output_format "json",
   :description "",
   :category ["Payment Services" "Campaign API"]}
  {:path "campaigns",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "List campaigns",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["limit"
      "offset"
      "sort"
      "filters"
      "campaignId"
      "title"
      "description"
      "status"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/campaigns",
   :pathParameters [],
   :controller "Api/2/Campaign.campaigns",
   :parameter_descriptions
   {:campaignId "", :title "", :description "", :status ""},
   :default_output_format "json",
   :description "List all campaigns for client",
   :category ["Payment Services" "Campaign API"]}
  {:path "identifier/{id}",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Get payment identifier",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/identifier/{id}",
   :pathParameters ["id"],
   :controller "Api/2/Identifier.identifier",
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description "Get a payment identifier by id",
   :category ["Payment Services" "Payment API"]}
  {:path "payment",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Trigger sale",
   :httpMethods
   {:POST
    {:name "POST",
     :required
     ["action" "productId" "clientRef" "agreementRef" "hash"],
     :optional ["price"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/payment",
   :pathParameters [],
   :controller "Api/2/Payment.payment_create",
   :parameter_descriptions
   {:action "",
    :productId "",
    :clientRef "",
    :agreementRef "",
    :hash "",
    :price ""},
   :default_output_format "json",
   :description "Used by clients to trigger payment on user.",
   :category ["Payment Services" "Payment API"]}
  {:path "payment/{id}",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Get payment",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/payment/{id}",
   :pathParameters ["id"],
   :controller "Api/2/Payment.payment",
   :parameter_descriptions {:id ""},
   :default_output_format "json",
   :description "Check status of a payment transaction.",
   :category ["Payment Services" "Payment API"]}
  {:path "payments",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Search transactions",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["clientRef" "userId" "productId" "status"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/payments",
   :pathParameters [],
   :controller "Api/2/Payment.payments",
   :parameter_descriptions
   {:clientRef "", :userId "", :productId "", :status ""},
   :default_output_format "json",
   :description "Search for payment transactions.",
   :category ["Payment Services" "Payment API"]}
  {:path "agreements/{userId}/payment",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Get agreements",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/agreements/{id}/payment",
   :pathParameters ["userId"],
   :controller "Api/2/Payment.agreements",
   :parameter_descriptions {:userId ""},
   :default_output_format "json",
   :description
   "Get the agreement(s) between the requesting client and a user",
   :category ["Payment Services" "Payment API"]}
  {:path "logins/{id/userId/email}",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Logins per user",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["limit" "since" "offset" "until" "ip" "status"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses [{:status 200, :description "", :type ""}]}},
   :url "/api/2/logins/{id}",
   :pathParameters ["id/userId/email"],
   :controller "Api/2/User.user_logins",
   :parameter_descriptions {:id/userId/email "", :ip "", :status ""},
   :default_output_format "json",
   :description "List all (or search for) logins for a user.",
   :category ["Identity Management" "Login API"]}
  {:path "subscriptions",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Search subscriptions",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["limit"
      "offset"
      "sort"
      "since"
      "until"
      "filters"
      "userId"
      "status"],
     :access_token_types ["server"],
     :filters ["updated" "expired" "inactive" "active" "all" "none"],
     :default_filters [],
     :responses
     [{:status 200,
       :description "A list of Subscription objects.",
       :type "[subscription]"}]}},
   :url "/api/2/subscriptions",
   :pathParameters [],
   :controller "Api/2/Subscriptions.subscriptions",
   :parameter_descriptions
   {:userId "Limit results to subscriptions for this user.",
    :status "Limit results to subscriptions with this status."},
   :default_output_format "json",
   :description "Search for subscriptions",
   :category ["Payment Services" "Subscription API"]}
  {:path "digitalcontents",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Search digital content",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["limit"
      "offset"
      "sort"
      "since"
      "until"
      "filters"
      "userId"
      "status"
      "productId"
      "parentProductId"
      "orderId"],
     :access_token_types ["server"],
     :filters ["updated" "expired" "active" "all" "none"],
     :default_filters [],
     :responses
     [{:status 200,
       :description "A list of DigitalContent objects.",
       :type "[digitalcontent]"}]}},
   :url "/api/2/digitalcontents",
   :pathParameters [],
   :controller "Api/2/Digitalcontents.digitalcontents",
   :parameter_descriptions
   {:userId "Limit results to digital content purchased by this user.",
    :status "Limit results to digital content with this status.",
    :productId "Limit results to digital content for this product.",
    :parentProductId
    "Limit results to digital content for this product and its child products.",
    :orderId "Limit results to digital content in this order."},
   :default_output_format "json",
   :description "Search for purchased digital content",
   :category ["Payment Services" "Digital Content API"]}
  {:path "kpis",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Search KPI",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional ["name" "limit" "offset" "sort" "since" "until"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses
     [{:status 200,
       :description "A list of KeyPerformanceIndicator objects",
       :type "[kpi]"}]}},
   :url "/api/2/kpis",
   :pathParameters [],
   :controller "Api/2/KeyPerformanceIndicator.kpi",
   :parameter_descriptions
   {:name
    "The name of one or more KPIs to query for, comma-separated. See the list of available KPIs above."},
   :default_output_format "json",
   :description "Search for Key Performance Indicators",
   :category ["Insight" "KPI API"]}
  {:path "paylink",
   :valid_output_formats ["json" "jsonp"],
   :method "POST",
   :name "Create PayLink",
   :httpMethods
   {:POST
    {:name "POST",
     :required ["title" "items"],
     :optional
     ["clientReference"
      "purchaseFlow"
      "paymentOptions"
      "expires"
      "redirectUri"
      "cancelUri"
      "sellerUserId"
      "buyerUserId"],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses
     [{:status 200,
       :description "A PayLink object",
       :type "paylink"}]}},
   :url "/api/2/paylink",
   :pathParameters [],
   :controller "Api/2/Paylink.paylink",
   :parameter_descriptions
   {:sellerUserId
    "If set, this user is designated as the seller and will receive the payment.",
    :clientReference
    "Your reference. Useful for tracking and processing the Order generated by this PayLink.",
    :items
    "The list of items to be sold. An array of PayLink Item objects.",
    :cancelUri
    "The user is redirected to this URL if login or payment is cancelled.",
    :expires
    "The date when the PayLink expires. A unix timestamp. Defaults to 24 hours from creation.",
    :buyerUserId "If set, only this user has access to the PayLink.",
    :title
    "The PayLink title. Displayed to the user on the payment page, and shown on the New Credit Card page at Payex.",
    :paymentOptions
    "The allowed payment methods for this PayLink. An integer bitmask: Credit (1), Credit cards (2), SMS (4), Invoice (8). Defaults to 2.",
    :purchaseFlow
    "Defaults to `DIRECT`, which will process the payment straight away. Can also be `AUTHORIZE`, where the payment is on hold and must later be captured.",
    :redirectUri
    "The user is redirected to this URL after payment is complete."},
   :default_output_format "json",
   :description "Create a PayLink object",
   :category ["Payment Services" "PayLink API"]}
  {:path "paylink",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Get or delete a paylink",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses
     [{:status 200,
       :description "A PayLink object",
       :type "paylink"}]},
    :DELETE
    {:name "DELETE",
     :required [],
     :optional [],
     :access_token_types ["server"],
     :filters [],
     :default_filters [],
     :responses
     [{:status 200,
       :description
       "A PayLink object, with its status changed to -1 (deleted)",
       :type "paylink"}]}},
   :url "/api/2/paylink/{id}",
   :pathParameters ["id"],
   :controller "Api/2/Paylink.paylink",
   :parameter_descriptions {:id "The unique PayLink identifier."},
   :default_output_format "json",
   :description "Get or delete a Paylink object",
   :category ["Payment Services" "PayLink API"]}
  {:path "logins",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Search logins",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional
     ["limit" "since" "offset" "until" "ip" "status" "filters"],
     :access_token_types ["server"],
     :filters ["merchant"],
     :default_filters [],
     :responses
     [{:status 200,
       :description "A list of login attempt objects.",
       :type "[login]"}]}},
   :url "/api/2/logins",
   :pathParameters [],
   :controller "Api/2/User.logins",
   :parameter_descriptions
   {:ip "Show only login attempts from this IP address",
    :status "Filter by successful (`true`) or failed (`false`) logins",
    :filters
    "Set to `merchant` to show only login attempts for the current merchant."},
   :default_output_format "json",
   :description "Query login attemps for a client.",
   :category ["Identity Management" "Login API"]}
  {:path "logout",
   :valid_output_formats ["json" "jsonp"],
   :method "GET",
   :name "Logout",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types ["user"],
     :filters [],
     :default_filters [],
     :responses
     [{:status 200, :description "\"OK\"", :type "string"}]}},
   :url "/api/2/logout",
   :pathParameters [],
   :controller "Api/2/User.logout",
   :parameter_descriptions {},
   :default_output_format "json",
   :description "Invalidate the user's SPiD session.",
   :category ["Identity Management" "Login API"]}
  {:path "api/2/*",
   :valid_output_formats ["json" "jsonp"],
   :method "*",
   :name "Not found error - 404",
   :httpMethods
   {:GET
    {:name "GET",
     :required [],
     :optional [],
     :access_token_types [],
     :filters [],
     :default_filters [],
     :responses
     [{:status 404,
       :description "No such endpoint.",
       :type "error"}]}},
   :url "/api/*",
   :pathParameters [],
   :controller "Api/2/Utility.not_found",
   :parameter_descriptions {},
   :default_output_format "json",
   :description
   "Response when requesting an endpoint that does not exist.",
   :category ["Utilities" "Platform API"]}],
 :name "SPP Container",
 :request {:reset 3154, :limit 360000, :remaining 359997},
 :error nil,
 :object "Utility",
 :version "0.2",
 :code 200,
 :type "collection",
 :debug
 {:route
  {:name "List API endpoints",
   :url "\\/api\\/2\\/endpoints",
   :controller "Api\\/2\\/Utility.endpoints"},
  :params {:options [], :where []}},
 :meta {:count 98, :offset 0},
 :api 2}
